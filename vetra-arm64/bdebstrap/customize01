#!/bin/sh

set -eu

echo "en_US.UTF-8 UTF-8" > $1/etc/locale.gen

chroot $1 apt install -y locales

if [ "$IGconf_player_chromium" = "yes" ]; then

APP="/usr/bin/chromium-browser https://player.vetra.ch \
   --kiosk --noerrdialogs --disable-infobars --disable-cursor \
   --no-first-run --ozone-platform=wayland --enable-wayland-ime --wayland-text-input-version=3 \
   --enable-features=OverlayScrollbar --start-maximized \
   --overscroll-history-navigation=0 --autoplay-policy=no-user-gesture-required \ --chrome-flags=\"--disable-features=Translate --disable-features=OverscrollHistoryNavigation\""   

# Create the kiosk app services
cat ../kiosk-chromium-hdmi0.service.tpl | sed \
   -e "s|<KIOSK_USER>|$IGconf_device_user1|g" \
   -e "s|<KIOSK_RUNDIR>|\/home\/$IGconf_device_user1|g" \
   -e "s|<KIOSK_APP>|$APP|g" \
   > $1/etc/systemd/system/kiosk-hdmi0.service

cat ../kiosk-chromium-hdmi1.service.tpl | sed \
   -e "s|<KIOSK_USER>|$IGconf_device_user1|g" \
   -e "s|<KIOSK_RUNDIR>|\/home\/$IGconf_device_user1|g" \
   -e "s|<KIOSK_APP>|$APP|g" \
   > $1/etc/systemd/system/kiosk-hdmi1.service

else

# Download vetra-player from GitHub
chroot $1 curl -L -o /tmp/vetra-player.deb "$IGconf_player_release_url"
if [ $? -ne 0 ]; then
    echo "ERROR: Failed to download vetra-player from $IGconf_player_release_url"
    exit 1
fi

DEB_FILE="$1/tmp/vetra-player.deb"
if [ -f "$DEB_FILE" ]; then
    echo "Installing Electron app: $DEB_FILE"
    chroot $1 apt install -y /tmp/vetra-player.deb
    rm -f $1/tmp/vetra-player.deb

    # Detect the app executable
    if echo "$DEB_FILE" | grep -q "vetra-player"; then
        APP="vetra-player"
    else
        APP=$(chroot $1 find /usr/bin /usr/local/bin /opt -name "*vetra*" -type f -executable 2>/dev/null | head -1)
    fi
    echo "Detected app executable: $APP"
else
    echo "ERROR: No vetra-player.deb found in chroot /tmp directory."
    exit 1
fi

# Create the kiosk app services
cat ../kiosk-hdmi0.service.tpl | sed \
   -e "s|<KIOSK_USER>|$IGconf_device_user1|g" \
   -e "s|<KIOSK_RUNDIR>|\/home\/$IGconf_device_user1|g" \
   -e "s|<KIOSK_APP>|$APP|g" \
   > $1/etc/systemd/system/kiosk-hdmi0.service

cat ../kiosk-hdmi1.service.tpl | sed \
   -e "s|<KIOSK_USER>|$IGconf_device_user1|g" \
   -e "s|<KIOSK_RUNDIR>|\/home\/$IGconf_device_user1|g" \
   -e "s|<KIOSK_APP>|$APP|g" \
   > $1/etc/systemd/system/kiosk-hdmi1.service

fi

# Write out our systemd services
# First the labwc compositor service
cat ../labwc.service.tpl | sed \
   -e "s|<KIOSK_USER>|$IGconf_device_user1|g" \
   -e "s|<KIOSK_RUNDIR>|\/home\/$IGconf_device_user1|g" \
   > $1/etc/systemd/system/labwc.service

# Then the kanshi output management service
cat ../kanshi.service.tpl | sed \
   -e "s|<KIOSK_USER>|$IGconf_device_user1|g" \
   -e "s|<KIOSK_RUNDIR>|\/home\/$IGconf_device_user1|g" \
   > $1/etc/systemd/system/kanshi.service

# Finally the squeekboard virtual keyboard service
cat ../squeekboard.service.tpl | sed \
   -e "s|<KIOSK_USER>|$IGconf_device_user1|g" \
   -e "s|<KIOSK_RUNDIR>|\/home\/$IGconf_device_user1|g" \
   > $1/etc/systemd/system/squeekboard.service

# Create kanshi config directory and file
mkdir -p $1/home/$IGconf_device_user1/.config/kanshi
cat ../kanshi.config.tpl > $1/home/$IGconf_device_user1/.config/kanshi/config
chroot $1 chown -R $IGconf_device_user1:$IGconf_device_user1 /home/$IGconf_device_user1/.config

# Create labwc config directory and file
mkdir -p $1/home/$IGconf_device_user1/.config/labwc
cat ../labwc-rc.xml.tpl > $1/home/$IGconf_device_user1/.config/labwc/rc.xml
cat ../labwc-autostart.tpl > $1/home/$IGconf_device_user1/.config/labwc/autostart
chroot $1 chown -R $IGconf_device_user1:$IGconf_device_user1 /home/$IGconf_device_user1/.config

# Customize NetworkManager-wait-online.service timeout
if [ -f "$1/lib/systemd/system/NetworkManager-wait-online.service" ]; then
    sed -i 's/Environment=NM_ONLINE_TIMEOUT=60/Environment=NM_ONLINE_TIMEOUT=15/' "$1/lib/systemd/system/NetworkManager-wait-online.service"
fi

# Customize systemd-networkd-wait-online.service timeout
if [ -f "$1/lib/systemd/system/systemd-networkd-wait-online.service" ]; then
    sed -i 's|ExecStart=/lib/systemd/systemd-networkd-wait-online|ExecStart=/lib/systemd/systemd-networkd-wait-online --timeout=15|' "$1/lib/systemd/system/systemd-networkd-wait-online.service"
fi

# Enable services so they start automatically
$BDEBSTRAP_HOOKS/enable-units "$1" labwc
$BDEBSTRAP_HOOKS/enable-units "$1" kanshi
$BDEBSTRAP_HOOKS/enable-units "$1" squeekboard

# Enable network manager wait online service
$BDEBSTRAP_HOOKS/enable-units "$1" NetworkManager-wait-online.service


